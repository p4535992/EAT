package com.github.p4535992.util.log.systemlog;

import java.io.*;
import java.util.*;

/**
 * Created by 4535992 on 05/11/2015.
 * @author 4535992.
 */
public class PrintLog extends PrintStream {

    private static final org.slf4j.Logger logger =
            org.slf4j.LoggerFactory.getLogger(PrintLog.class);

    //-----------------------------------------------
    //Constructor
    //-----------------------------------------------

    public PrintLog(PrintStream out) {
        super(out);
    }

    public PrintLog(OutputStream out) {
        super(out, false);
    }

    public PrintLog(OutputStream out, boolean autoFlush) {
        super(out, autoFlush);
    }

    public PrintLog(OutputStream out, boolean autoFlush, String encoding) throws UnsupportedEncodingException {
        super(out,autoFlush,encoding);
    }

    public PrintLog(String fileName) throws FileNotFoundException {
        this(new FileOutputStream(fileName),false);
    }

    public PrintLog(String fileName,String csn) throws FileNotFoundException, UnsupportedEncodingException {
        super(new FileOutputStream(fileName), false, csn);
    }

    public PrintLog(File file) throws FileNotFoundException {
        super(new FileOutputStream(file), false);
    }

    public PrintLog(File file, String csn)throws FileNotFoundException, UnsupportedEncodingException {
        super(new FileOutputStream(file), false, csn );
    }

    //------------------------------------
    //Methods
    //------------------------------------

    @Override
    public void flush() {super.flush();}
    @Override
    public void close() {
        // Restore the original standard output and standard error.
        // Then close the log file.
        System.setOut(oldStdout);
        System.setErr(oldStderr);
        try {
            logStreamFile.close();
        }
        catch (Exception ignored){}
        super.close();
    }
    @Override
    public boolean checkError() {return super.checkError();}

    @Override
    public void write(int b) {
        super.write(b);//go to SystemLog
    }

    @Override
    public void write(byte buf[], int off, int len) {
        super.write(buf,off,len); //go to SystemLog
    }

    //---------------------------------------------------
    // Methods that do not terminate lines
    //---------------------------------------------------

    @Override
    public void print(boolean b) {
        super.print(b);
    }
    @Override
    public void print(char c) {
        super.print(c);
    }
    @Override
    public void print(int i) {
        super.print(i);
    }
    @Override
    public void print(long l) {
        super.print(l);
    }
    @Override
    public void print(float f) {
        super.print(f);
    }
    @Override
    public void print(double d) {super.print(d);}
    @Override
    public void print(char s[]) {super.print(Arrays.toString(s));}
    @Override
    public void print(String s) { super.print(s);}
    @Override
    public void print(Object obj) {
        super.print(obj);
    }

    //---------------------------------------------------
    /* Methods that do terminate lines */
    //---------------------------------------------------

    @Override
    public void println() {super.println();}
    @Override
    public void println(boolean x) {super.println(x);}
    @Override
    public void println(char x) { super.println(x);}
    @Override
    public void println(int x) {super.println(x);}
    @Override
    public void println(long x) {super.println(x); }
    @Override
    public void println(float x) {super.println(x); }
    @Override
    public void println(double x) {super.println(x); }
    @Override
    public void println(char x[]) {super.println(Arrays.toString(x)); }
    @Override
    public void println(String x) {super.println(x); }
    @Override
    public void println(Object x) { super.println(x); }

    @Override
    public PrintLog printf(String format, Object ... args) {
        return (PrintLog) super.printf(format, args);
    }
    @Override
    public PrintLog printf(Locale l, String format, Object ... args) {
        return (PrintLog) super.printf(l,format, args);
    }
    @Override
    public PrintLog format(String format, Object ... args) {
        return (PrintLog) super.format(format, args);
    }
    @Override
    public PrintLog format(Locale l, String format, Object ... args) {
        return (PrintLog) super.format(l,format, args);
    }
    @Override
    public PrintLog append(CharSequence csq) {return (PrintLog) super.append(csq);}
    @Override
    public PrintLog append(CharSequence csq, int start, int end) {return (PrintLog) super.append(csq,start,end);}
    @Override
    public PrintLog append(char c) {return (PrintLog) super.append(c); }

    //------------------------------------------------------------------------
    //New Methods
    //------------------------------------------------------------------------

    static PrintStream oldStdout;
    static PrintStream oldStderr;
    static OutputStream logStreamFile;
    static File logFile;

    /**
     * Now all data written to System.out should be redirected into the file
     * "c:\\data\\system.out.txt". Keep in mind though, that you should make
     * sure to flush System.out and close the file before the JVM shuts down,
     * to be sure that all data written to System.out is actually flushed to the file.
     * @throws FileNotFoundException throw if the file of the log append text not exists.
     */
    public static void start() throws FileNotFoundException {
        start(new File(""));
    }

    public static void start(String fileName) throws FileNotFoundException {
        start(new File(fileName));
    }

    @SuppressWarnings("rawtypes")
    public static void start(File file) throws FileNotFoundException {
        // Save current settings for later restoring.
        oldStdout = System.out;
        oldStderr = System.err;
        com.github.p4535992.util.log.systemlog.SystemLog multiOut;
        com.github.p4535992.util.log.systemlog.SystemLog multiErr;

        if(com.github.p4535992.util.log.systemlog.SystemLog.isLog4j) {
            System.setOut(createLoggingProxyOut(System.out));
            System.setErr(createLoggingProxyErr(System.err));
        }else {
            if (file.getPath().isEmpty()) {
                multiOut = new com.github.p4535992.util.log.systemlog.SystemLog(System.out);
                multiErr = new com.github.p4535992.util.log.systemlog.SystemLog(System.err);
            } else {
                logFile = file;
                logStreamFile = new PrintStream(
                        new BufferedOutputStream(
                                new FileOutputStream(file)));
                multiOut = new com.github.p4535992.util.log.systemlog.SystemLog(System.out, logStreamFile);
                multiErr = new com.github.p4535992.util.log.systemlog.SystemLog(System.err, logStreamFile);
            }
            PrintLog stdout = new PrintLog(multiOut);
            PrintLog stderr = new PrintLog(multiErr);
            System.setOut(stdout);
            System.setErr(stderr);
        }
    }

    /**
     *  Ceases logging and restores the original settings.
     *  Restore the original standard output and standard error.
     *  Then close the log file.
     */
    public static void stop(){
        try {
            if (logStreamFile != null) {
                logStreamFile.close();
            }
            System.setOut(oldStdout);
            System.setErr(oldStderr);
        }catch(IOException ignored){}
    }

    public static PrintStream createLoggingProxyOut(final PrintStream realPrintStream) {
        return new PrintStream(realPrintStream) {
            @Override
            public void print(final String string) {
                realPrintStream.print(string);
                logger.info(string);
            }
        };
    }

    public static PrintStream createLoggingProxyErr(final PrintStream realPrintStream) {
        return new PrintStream(realPrintStream) {
            @Override
            public void print(final String string) {
                realPrintStream.print(string);
                logger.error(string);
            }
        };
    }
}
